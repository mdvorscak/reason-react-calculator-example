// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_Debug = require("bs-platform/lib/js/belt_Debug.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ScaleableTextButton$ReactHooksTemplate = require("./ScaleableTextButton.bs.js");

Belt_Debug.setupChromeDebugger(/* () */0);

var textColor = Css.hex("2d3436");

var Theme = /* module */Block.localModule(["textColor"], [textColor]);

var root = Css.style(/* :: */Block.simpleVariant("::", [
        Css.width(Css.px(640)),
        /* :: */Block.simpleVariant("::", [
            Css.height(Css.px(640)),
            /* :: */Block.simpleVariant("::", [
                Css.backgroundColor(Css.hex("dfe6e9")),
                /* :: */Block.simpleVariant("::", [
                    Css.display(/* flex */-1010954439),
                    /* :: */Block.simpleVariant("::", [
                        Css.flexDirection(/* column */-963948842),
                        /* [] */0
                      ])
                  ])
              ])
          ])
      ]));

var total = Css.style(/* :: */Block.simpleVariant("::", [
        Css.fontSize(Css.px(36)),
        /* :: */Block.simpleVariant("::", [
            Css.color(textColor),
            /* :: */Block.simpleVariant("::", [
                Css.margin(Css.px(24)),
                /* :: */Block.simpleVariant("::", [
                    Css.padding(Css.px(12)),
                    /* :: */Block.simpleVariant("::", [
                        Css.borderRadius(Css.px(3)),
                        /* :: */Block.simpleVariant("::", [
                            Css.textAlign(/* right */-379319332),
                            /* :: */Block.simpleVariant("::", [
                                Css.backgroundColor(Css.white),
                                /* [] */0
                              ])
                          ])
                      ])
                  ])
              ])
          ])
      ]));

var buttonsContainer = Css.style(/* :: */Block.simpleVariant("::", [
        Css.display(/* flex */-1010954439),
        /* [] */0
      ]));

var button = Css.style(/* :: */Block.simpleVariant("::", [
        Css.fontSize(Css.px(48)),
        /* :: */Block.simpleVariant("::", [
            Css.color(textColor),
            /* :: */Block.simpleVariant("::", [
                Css.margin(Css.px(36)),
                /* :: */Block.simpleVariant("::", [
                    Css.borderRadius(Css.px(3)),
                    /* :: */Block.simpleVariant("::", [
                        Css.width(Css.px(48)),
                        /* :: */Block.simpleVariant("::", [
                            Css.height(Css.px(60)),
                            /* :: */Block.simpleVariant("::", [
                                Css.cursor(/* pointer */-786317123),
                                /* :: */Block.simpleVariant("::", [
                                    Css.backgroundColor(Css.white),
                                    /* :: */Block.simpleVariant("::", [
                                        Css.border(Css.px(1), /* solid */12956715, Css.hex("333333")),
                                        /* [] */0
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ])
              ])
          ])
      ]));

var operatorsGroup = Css.style(/* :: */Block.simpleVariant("::", [
        Css.flexDirection(/* column */-963948842),
        /* [] */0
      ]));

var operatorButton = Css.merge(/* :: */Block.simpleVariant("::", [
        button,
        /* :: */Block.simpleVariant("::", [
            Css.style(/* :: */Block.simpleVariant("::", [
                    Css.backgroundColor(Css.hex("74b9ff")),
                    /* :: */Block.simpleVariant("::", [
                        Css.color(Css.hex("FFF")),
                        /* [] */0
                      ])
                  ])),
            /* [] */0
          ])
      ]));

var deleteButton = Css.merge(/* :: */Block.simpleVariant("::", [
        button,
        /* :: */Block.simpleVariant("::", [
            Css.style(/* :: */Block.simpleVariant("::", [
                    Css.backgroundColor(Css.hex("d63031")),
                    /* :: */Block.simpleVariant("::", [
                        Css.SVG[/* fill */0](Css.hex("FFF")),
                        /* [] */0
                      ])
                  ])),
            /* [] */0
          ])
      ]));

var numbersContainer = Css.style(/* :: */Block.simpleVariant("::", [
        Css.flexDirection(/* column */-963948842),
        /* [] */0
      ]));

var Styles = /* module */Block.localModule([
    "root",
    "total",
    "buttonsContainer",
    "button",
    "operatorsGroup",
    "operatorButton",
    "deleteButton",
    "numbersContainer"
  ], [
    root,
    total,
    buttonsContainer,
    button,
    operatorsGroup,
    operatorButton,
    deleteButton,
    numbersContainer
  ]);

function pop_last_char(str) {
  var len = str.length;
  return $$String.sub(str, 0, len - 1 | 0);
}

function Calculator(Props) {
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            switch (action) {
              case 0 : 
                  return /* record */Block.record([
                            "total",
                            "operator"
                          ], [
                            state[/* total */0],
                            0
                          ]);
              case 1 : 
                  return /* record */Block.record([
                            "total",
                            "operator"
                          ], [
                            state[/* total */0],
                            2
                          ]);
              case 2 : 
                  return /* record */Block.record([
                            "total",
                            "operator"
                          ], [
                            state[/* total */0],
                            1
                          ]);
              case 3 : 
                  return /* record */Block.record([
                            "total",
                            "operator"
                          ], [
                            state[/* total */0],
                            3
                          ]);
              case 4 : 
                  var match = String(Pervasives.abs(state[/* total */0])).length;
                  if (match === 0 || match === 1) {
                    return state;
                  } else {
                    return /* record */Block.record([
                              "total",
                              "operator"
                            ], [
                              Caml_format.caml_int_of_string(pop_last_char(String(state[/* total */0]))),
                              state[/* operator */1]
                            ]);
                  }
              case 5 : 
                  return /* record */Block.record([
                            "total",
                            "operator"
                          ], [
                            0,
                            4
                          ]);
              
            }
          } else {
            var x = action[0];
            var match$1 = state[/* operator */1];
            switch (match$1) {
              case 0 : 
                  return /* record */Block.record([
                            "total",
                            "operator"
                          ], [
                            state[/* total */0] + x | 0,
                            4
                          ]);
              case 1 : 
                  return /* record */Block.record([
                            "total",
                            "operator"
                          ], [
                            state[/* total */0] - x | 0,
                            4
                          ]);
              case 2 : 
                  return /* record */Block.record([
                            "total",
                            "operator"
                          ], [
                            Caml_int32.imul(state[/* total */0], x),
                            4
                          ]);
              case 3 : 
                  return /* record */Block.record([
                            "total",
                            "operator"
                          ], [
                            Caml_int32.div(state[/* total */0], x),
                            4
                          ]);
              case 4 : 
                  var match$2 = state[/* total */0];
                  if (match$2 !== 0) {
                    return /* record */Block.record([
                              "total",
                              "operator"
                            ], [
                              Caml_format.caml_int_of_string(String(state[/* total */0]) + String(x)),
                              state[/* operator */1]
                            ]);
                  } else {
                    return /* record */Block.record([
                              "total",
                              "operator"
                            ], [
                              x,
                              state[/* operator */1]
                            ]);
                  }
              
            }
          }
        }), /* record */Block.record([
          "total",
          "operator"
        ], [
          0,
          4
        ]));
  var dispatch = match[1];
  var total$1 = String(match[0][/* total */0]);
  return React.createElement("div", {
              className: root
            }, React.createElement("div", {
                  className: total
                }, total$1), React.createElement("div", {
                  className: buttonsContainer
                }, React.createElement("div", {
                      className: numbersContainer
                    }, $$Array.of_list(List.map((function (x) {
                                return React.createElement("button", {
                                            key: String(x),
                                            className: button,
                                            onClick: (function (param) {
                                                return Curry._1(dispatch, /* SetNumber */Block.simpleVariant("SetNumber", [x]));
                                              })
                                          }, String(x));
                              }), /* :: */Block.simpleVariant("::", [
                                0,
                                /* :: */Block.simpleVariant("::", [
                                    1,
                                    /* :: */Block.simpleVariant("::", [
                                        2,
                                        /* :: */Block.simpleVariant("::", [
                                            3,
                                            /* :: */Block.simpleVariant("::", [
                                                4,
                                                /* :: */Block.simpleVariant("::", [
                                                    5,
                                                    /* :: */Block.simpleVariant("::", [
                                                        6,
                                                        /* :: */Block.simpleVariant("::", [
                                                            7,
                                                            /* :: */Block.simpleVariant("::", [
                                                                8,
                                                                /* :: */Block.simpleVariant("::", [
                                                                    9,
                                                                    /* [] */0
                                                                  ])
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])))), React.createElement("div", {
                      className: operatorsGroup
                    }, React.createElement("button", {
                          className: operatorButton,
                          onClick: (function (param) {
                              return Curry._1(dispatch, /* Add */0);
                            })
                        }, "+"), React.createElement("button", {
                          className: operatorButton,
                          onClick: (function (param) {
                              return Curry._1(dispatch, /* Multiply */1);
                            })
                        }, "*"), React.createElement("button", {
                          className: operatorButton,
                          onClick: (function (param) {
                              return Curry._1(dispatch, /* Subtract */2);
                            })
                        }, "-"), React.createElement("button", {
                          className: operatorButton,
                          onClick: (function (param) {
                              return Curry._1(dispatch, /* Divide */3);
                            })
                        }, "/"), React.createElement(ScaleableTextButton$ReactHooksTemplate.make, {
                          t: "Del",
                          w: 48,
                          h: 60,
                          s: deleteButton
                        }), React.createElement("button", {
                          className: operatorButton,
                          onClick: (function (param) {
                              return Curry._1(dispatch, /* Clear */5);
                            })
                        }, "C"))));
}

var make = Calculator;

exports.Theme = Theme;
exports.Styles = Styles;
exports.pop_last_char = pop_last_char;
exports.make = make;
/*  Not a pure module */
